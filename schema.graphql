schema {
  query: Query
  mutation: Mutation
}
"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON
"A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar DateTime
scalar PostContentDynamicZoneInput
"A string used to identify an i18n locale"
scalar I18NLocaleCode
type Error {
  code: String!
  message: String
}
type Pagination {
  total: Int!
  page: Int!
  pageSize: Int!
  pageCount: Int!
}
type DeleteMutationResponse {
  documentId: ID!
}
type ComponentLayoutPostsSelection {
  id: ID!
  title: String!
  subTitle: String
  category: Category
  limit: Int!
  sort: String
}
type ComponentLayoutHero {
  id: ID!
  title: String!
  callToAction: String!
  image: String!
}
type ComponentContentRichText {
  id: ID!
  description: String
}
type ComponentContentImage {
  id: ID!
  title: String!
  url: String
}
type UploadFile {
  documentId: ID!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [GenericMorph]
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}
type UploadFileEntityResponseCollection {
  nodes: [UploadFile!]!
  pageInfo: Pagination!
}
type I18NLocale {
  documentId: ID!
  name: String
  code: String
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}
type I18NLocaleEntityResponseCollection {
  nodes: [I18NLocale!]!
  pageInfo: Pagination!
}
type ReviewWorkflowsWorkflow {
  documentId: ID!
  name: String!
  stages_connection(filters: ReviewWorkflowsWorkflowStageFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): ReviewWorkflowsWorkflowStageRelationResponseCollection
  stages(filters: ReviewWorkflowsWorkflowStageFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ReviewWorkflowsWorkflowStage]!
  stageRequiredToPublish: ReviewWorkflowsWorkflowStage
  contentTypes: JSON!
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}
type ReviewWorkflowsWorkflowEntityResponseCollection {
  nodes: [ReviewWorkflowsWorkflow!]!
  pageInfo: Pagination!
}
type ReviewWorkflowsWorkflowStage {
  documentId: ID!
  name: String
  color: String
  workflow: ReviewWorkflowsWorkflow
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}
type ReviewWorkflowsWorkflowStageEntityResponseCollection {
  nodes: [ReviewWorkflowsWorkflowStage!]!
  pageInfo: Pagination!
}
type ReviewWorkflowsWorkflowStageRelationResponseCollection {
  nodes: [ReviewWorkflowsWorkflowStage!]!
}
type UsersPermissionsPermission {
  documentId: ID!
  action: String!
  role: UsersPermissionsRole
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}
type UsersPermissionsPermissionRelationResponseCollection {
  nodes: [UsersPermissionsPermission!]!
}
type UsersPermissionsRole {
  documentId: ID!
  name: String!
  description: String
  type: String
  permissions_connection(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsPermissionRelationResponseCollection
  permissions(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [UsersPermissionsPermission]!
  users_connection(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
  users(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [UsersPermissionsUser]!
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}
type UsersPermissionsRoleEntityResponseCollection {
  nodes: [UsersPermissionsRole!]!
  pageInfo: Pagination!
}
type UsersPermissionsUser {
  documentId: ID!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}
type UsersPermissionsUserEntityResponse {
  data: UsersPermissionsUser
}
type UsersPermissionsUserEntityResponseCollection {
  nodes: [UsersPermissionsUser!]!
  pageInfo: Pagination!
}
type UsersPermissionsUserRelationResponseCollection {
  nodes: [UsersPermissionsUser!]!
}
type BlogPage {
  documentId: ID!
  title: String!
  slug: String!
  posts: ComponentLayoutPostsSelection!
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
  locale: String
  localizations_connection: BlogPageRelationResponseCollection
  localizations: [BlogPage]!
}
type BlogPageRelationResponseCollection {
  nodes: [BlogPage!]!
}
type Category {
  documentId: ID!
  title: String!
  slug: String!
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
  locale: String
  localizations_connection(filters: CategoryFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): CategoryRelationResponseCollection
  localizations(filters: CategoryFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [Category]!
}
type CategoryEntityResponseCollection {
  nodes: [Category!]!
  pageInfo: Pagination!
}
type CategoryRelationResponseCollection {
  nodes: [Category!]!
}
type HomePage {
  documentId: ID!
  title: String!
  hero: ComponentLayoutHero
  blogPosts: ComponentLayoutPostsSelection
  poetryPosts: ComponentLayoutPostsSelection
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
  locale: String
  localizations_connection: HomePageRelationResponseCollection
  localizations: [HomePage]!
}
type HomePageRelationResponseCollection {
  nodes: [HomePage!]!
}
type PoetryPage {
  documentId: ID!
  title: String!
  slug: String!
  posts: ComponentLayoutPostsSelection!
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
  locale: String
  localizations_connection: PoetryPageRelationResponseCollection
  localizations: [PoetryPage]!
}
type PoetryPageRelationResponseCollection {
  nodes: [PoetryPage!]!
}
type Post {
  documentId: ID!
  title: String!
  slug: String!
  category: Category
  Content: [PostContentDynamicZone]
  PostImage: ComponentContentImage
  excerpt: String!
  date: DateTime!
  featured: Boolean
  coverImage: UploadFile
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
  locale: String
  localizations_connection(filters: PostFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): PostRelationResponseCollection
  localizations(filters: PostFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [Post]!
}
type PostEntityResponseCollection {
  nodes: [Post!]!
  pageInfo: Pagination!
}
type PostRelationResponseCollection {
  nodes: [Post!]!
}
type PostsPage {
  documentId: ID!
  title: String!
  slug: String!
  posts: ComponentLayoutPostsSelection
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
  locale: String
  localizations_connection(filters: PostsPageFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): PostsPageRelationResponseCollection
  localizations(filters: PostsPageFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [PostsPage]!
}
type PostsPageEntityResponseCollection {
  nodes: [PostsPage!]!
  pageInfo: Pagination!
}
type PostsPageRelationResponseCollection {
  nodes: [PostsPage!]!
}
type UsersPermissionsMe {
  id: ID!
  documentId: ID!
  username: String!
  email: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}
type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}
type UsersPermissionsPasswordPayload {
  ok: Boolean!
}
type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}
type UsersPermissionsCreateRolePayload {
  ok: Boolean!
}
type UsersPermissionsUpdateRolePayload {
  ok: Boolean!
}
type UsersPermissionsDeleteRolePayload {
  ok: Boolean!
}
type Query {
  uploadFile(documentId: ID!, status: PublicationStatus = PUBLISHED): UploadFile
  uploadFiles_connection(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): UploadFileEntityResponseCollection
  uploadFiles(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [UploadFile]!
  i18NLocale(documentId: ID!, status: PublicationStatus = PUBLISHED): I18NLocale
  i18NLocales_connection(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): I18NLocaleEntityResponseCollection
  i18NLocales(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [I18NLocale]!
  reviewWorkflowsWorkflow(documentId: ID!, status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflow
  reviewWorkflowsWorkflows_connection(filters: ReviewWorkflowsWorkflowFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflowEntityResponseCollection
  reviewWorkflowsWorkflows(filters: ReviewWorkflowsWorkflowFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [ReviewWorkflowsWorkflow]!
  reviewWorkflowsWorkflowStage(documentId: ID!, status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflowStage
  reviewWorkflowsWorkflowStages_connection(filters: ReviewWorkflowsWorkflowStageFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflowStageEntityResponseCollection
  reviewWorkflowsWorkflowStages(filters: ReviewWorkflowsWorkflowStageFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [ReviewWorkflowsWorkflowStage]!
  usersPermissionsRole(documentId: ID!, status: PublicationStatus = PUBLISHED): UsersPermissionsRole
  usersPermissionsRoles_connection(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsRoles(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [UsersPermissionsRole]!
  usersPermissionsUser(documentId: ID!, status: PublicationStatus = PUBLISHED): UsersPermissionsUser
  usersPermissionsUsers_connection(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): UsersPermissionsUserEntityResponseCollection
  usersPermissionsUsers(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [UsersPermissionsUser]!
  blogPage(status: PublicationStatus = PUBLISHED, 
    "The locale to use for the query"
    locale: I18NLocaleCode
  ): BlogPage
  category(documentId: ID!, status: PublicationStatus = PUBLISHED, 
    "The locale to use for the query"
    locale: I18NLocaleCode
  ): Category
  categories_connection(filters: CategoryFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED, 
    "The locale to use for the query"
    locale: I18NLocaleCode
  ): CategoryEntityResponseCollection
  categories(filters: CategoryFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED, 
    "The locale to use for the query"
    locale: I18NLocaleCode
  ): [Category]!
  homePage(status: PublicationStatus = PUBLISHED, 
    "The locale to use for the query"
    locale: I18NLocaleCode
  ): HomePage
  poetryPage(status: PublicationStatus = PUBLISHED, 
    "The locale to use for the query"
    locale: I18NLocaleCode
  ): PoetryPage
  post(documentId: ID!, status: PublicationStatus = PUBLISHED, 
    "The locale to use for the query"
    locale: I18NLocaleCode
  ): Post
  posts_connection(filters: PostFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED, 
    "The locale to use for the query"
    locale: I18NLocaleCode
  ): PostEntityResponseCollection
  posts(filters: PostFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED, 
    "The locale to use for the query"
    locale: I18NLocaleCode
  ): [Post]!
  postsPage(documentId: ID!, status: PublicationStatus = PUBLISHED, 
    "The locale to use for the query"
    locale: I18NLocaleCode
  ): PostsPage
  postsPages_connection(filters: PostsPageFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED, 
    "The locale to use for the query"
    locale: I18NLocaleCode
  ): PostsPageEntityResponseCollection
  postsPages(filters: PostsPageFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED, 
    "The locale to use for the query"
    locale: I18NLocaleCode
  ): [PostsPage]!
  me: UsersPermissionsMe
}
type Mutation {
  createReviewWorkflowsWorkflow(status: PublicationStatus = PUBLISHED, data: ReviewWorkflowsWorkflowInput!): ReviewWorkflowsWorkflow
  updateReviewWorkflowsWorkflow(documentId: ID!, status: PublicationStatus = PUBLISHED, data: ReviewWorkflowsWorkflowInput!): ReviewWorkflowsWorkflow
  deleteReviewWorkflowsWorkflow(documentId: ID!): DeleteMutationResponse
  createReviewWorkflowsWorkflowStage(status: PublicationStatus = PUBLISHED, data: ReviewWorkflowsWorkflowStageInput!): ReviewWorkflowsWorkflowStage
  updateReviewWorkflowsWorkflowStage(documentId: ID!, status: PublicationStatus = PUBLISHED, data: ReviewWorkflowsWorkflowStageInput!): ReviewWorkflowsWorkflowStage
  deleteReviewWorkflowsWorkflowStage(documentId: ID!): DeleteMutationResponse
  updateBlogPage(status: PublicationStatus = PUBLISHED, data: BlogPageInput!, 
    "The locale to use for the query"
    locale: I18NLocaleCode
  ): BlogPage
  deleteBlogPage(
    "The locale to use for the query"
    locale: I18NLocaleCode
  ): DeleteMutationResponse
  createCategory(status: PublicationStatus = PUBLISHED, data: CategoryInput!, 
    "The locale to use for the query"
    locale: I18NLocaleCode
  ): Category
  updateCategory(documentId: ID!, status: PublicationStatus = PUBLISHED, data: CategoryInput!, 
    "The locale to use for the query"
    locale: I18NLocaleCode
  ): Category
  deleteCategory(documentId: ID!, 
    "The locale to use for the query"
    locale: I18NLocaleCode
  ): DeleteMutationResponse
  updateHomePage(status: PublicationStatus = PUBLISHED, data: HomePageInput!, 
    "The locale to use for the query"
    locale: I18NLocaleCode
  ): HomePage
  deleteHomePage(
    "The locale to use for the query"
    locale: I18NLocaleCode
  ): DeleteMutationResponse
  updatePoetryPage(status: PublicationStatus = PUBLISHED, data: PoetryPageInput!, 
    "The locale to use for the query"
    locale: I18NLocaleCode
  ): PoetryPage
  deletePoetryPage(
    "The locale to use for the query"
    locale: I18NLocaleCode
  ): DeleteMutationResponse
  createPost(status: PublicationStatus = PUBLISHED, data: PostInput!, 
    "The locale to use for the query"
    locale: I18NLocaleCode
  ): Post
  updatePost(documentId: ID!, status: PublicationStatus = PUBLISHED, data: PostInput!, 
    "The locale to use for the query"
    locale: I18NLocaleCode
  ): Post
  deletePost(documentId: ID!, 
    "The locale to use for the query"
    locale: I18NLocaleCode
  ): DeleteMutationResponse
  createPostsPage(status: PublicationStatus = PUBLISHED, data: PostsPageInput!, 
    "The locale to use for the query"
    locale: I18NLocaleCode
  ): PostsPage
  updatePostsPage(documentId: ID!, status: PublicationStatus = PUBLISHED, data: PostsPageInput!, 
    "The locale to use for the query"
    locale: I18NLocaleCode
  ): PostsPage
  deletePostsPage(documentId: ID!, 
    "The locale to use for the query"
    locale: I18NLocaleCode
  ): DeleteMutationResponse
  updateUploadFile(id: ID!, info: FileInfoInput): UploadFile!
  deleteUploadFile(id: ID!): UploadFile
  "Create a new role"
  createUsersPermissionsRole(data: UsersPermissionsRoleInput!): UsersPermissionsCreateRolePayload
  "Update an existing role"
  updateUsersPermissionsRole(id: ID!, data: UsersPermissionsRoleInput!): UsersPermissionsUpdateRolePayload
  "Delete an existing role"
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload
  "Create a new user"
  createUsersPermissionsUser(data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!
  "Update an existing user"
  updateUsersPermissionsUser(id: ID!, data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!
  "Delete an existing user"
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  "Register a user"
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  "Request a reset password token"
  forgotPassword(email: String!): UsersPermissionsPasswordPayload
  "Reset user password. Confirm with a code (resetToken from forgotPassword)"
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  "Change user password. Confirm with the current password."
  changePassword(currentPassword: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  "Confirm an email users email address"
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}
union PostContentDynamicZone = ComponentContentImage | ComponentContentRichText | Error
union GenericMorph = ComponentLayoutPostsSelection | ComponentLayoutHero | ComponentContentRichText | ComponentContentImage | UploadFile | I18NLocale | ReviewWorkflowsWorkflow | ReviewWorkflowsWorkflowStage | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsUser | BlogPage | Category | HomePage | PoetryPage | Post | PostsPage
enum PublicationStatus {
  DRAFT
  PUBLISHED
}
input IDFilterInput {
  and: [ID]
  or: [ID]
  not: IDFilterInput
  eq: ID
  eqi: ID
  ne: ID
  nei: ID
  startsWith: ID
  endsWith: ID
  contains: ID
  notContains: ID
  containsi: ID
  notContainsi: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  null: Boolean
  notNull: Boolean
  in: [ID]
  notIn: [ID]
  between: [ID]
}
input BooleanFilterInput {
  and: [Boolean]
  or: [Boolean]
  not: BooleanFilterInput
  eq: Boolean
  eqi: Boolean
  ne: Boolean
  nei: Boolean
  startsWith: Boolean
  endsWith: Boolean
  contains: Boolean
  notContains: Boolean
  containsi: Boolean
  notContainsi: Boolean
  gt: Boolean
  gte: Boolean
  lt: Boolean
  lte: Boolean
  null: Boolean
  notNull: Boolean
  in: [Boolean]
  notIn: [Boolean]
  between: [Boolean]
}
input StringFilterInput {
  and: [String]
  or: [String]
  not: StringFilterInput
  eq: String
  eqi: String
  ne: String
  nei: String
  startsWith: String
  endsWith: String
  contains: String
  notContains: String
  containsi: String
  notContainsi: String
  gt: String
  gte: String
  lt: String
  lte: String
  null: Boolean
  notNull: Boolean
  in: [String]
  notIn: [String]
  between: [String]
}
input IntFilterInput {
  and: [Int]
  or: [Int]
  not: IntFilterInput
  eq: Int
  eqi: Int
  ne: Int
  nei: Int
  startsWith: Int
  endsWith: Int
  contains: Int
  notContains: Int
  containsi: Int
  notContainsi: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  null: Boolean
  notNull: Boolean
  in: [Int]
  notIn: [Int]
  between: [Int]
}
input FloatFilterInput {
  and: [Float]
  or: [Float]
  not: FloatFilterInput
  eq: Float
  eqi: Float
  ne: Float
  nei: Float
  startsWith: Float
  endsWith: Float
  contains: Float
  notContains: Float
  containsi: Float
  notContainsi: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  null: Boolean
  notNull: Boolean
  in: [Float]
  notIn: [Float]
  between: [Float]
}
input DateTimeFilterInput {
  and: [DateTime]
  or: [DateTime]
  not: DateTimeFilterInput
  eq: DateTime
  eqi: DateTime
  ne: DateTime
  nei: DateTime
  startsWith: DateTime
  endsWith: DateTime
  contains: DateTime
  notContains: DateTime
  containsi: DateTime
  notContainsi: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  null: Boolean
  notNull: Boolean
  in: [DateTime]
  notIn: [DateTime]
  between: [DateTime]
}
input JSONFilterInput {
  and: [JSON]
  or: [JSON]
  not: JSONFilterInput
  eq: JSON
  eqi: JSON
  ne: JSON
  nei: JSON
  startsWith: JSON
  endsWith: JSON
  contains: JSON
  notContains: JSON
  containsi: JSON
  notContainsi: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  null: Boolean
  notNull: Boolean
  in: [JSON]
  notIn: [JSON]
  between: [JSON]
}
input ComponentLayoutPostsSelectionFiltersInput {
  title: StringFilterInput
  subTitle: StringFilterInput
  category: CategoryFiltersInput
  limit: IntFilterInput
  sort: StringFilterInput
  and: [ComponentLayoutPostsSelectionFiltersInput]
  or: [ComponentLayoutPostsSelectionFiltersInput]
  not: ComponentLayoutPostsSelectionFiltersInput
}
input ComponentLayoutPostsSelectionInput {
  id: ID
  title: String
  subTitle: String
  category: ID
  limit: Int
  sort: String
}
input ComponentLayoutHeroInput {
  id: ID
  title: String
  callToAction: String
  image: String
}
input ComponentContentImageFiltersInput {
  title: StringFilterInput
  url: StringFilterInput
  and: [ComponentContentImageFiltersInput]
  or: [ComponentContentImageFiltersInput]
  not: ComponentContentImageFiltersInput
}
input ComponentContentImageInput {
  id: ID
  title: String
  url: String
}
input UploadFileFiltersInput {
  documentId: IDFilterInput
  name: StringFilterInput
  alternativeText: StringFilterInput
  caption: StringFilterInput
  width: IntFilterInput
  height: IntFilterInput
  formats: JSONFilterInput
  hash: StringFilterInput
  ext: StringFilterInput
  mime: StringFilterInput
  size: FloatFilterInput
  url: StringFilterInput
  previewUrl: StringFilterInput
  provider: StringFilterInput
  provider_metadata: JSONFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [UploadFileFiltersInput]
  or: [UploadFileFiltersInput]
  not: UploadFileFiltersInput
}
input I18NLocaleFiltersInput {
  documentId: IDFilterInput
  name: StringFilterInput
  code: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [I18NLocaleFiltersInput]
  or: [I18NLocaleFiltersInput]
  not: I18NLocaleFiltersInput
}
input ReviewWorkflowsWorkflowFiltersInput {
  documentId: IDFilterInput
  name: StringFilterInput
  stages: ReviewWorkflowsWorkflowStageFiltersInput
  stageRequiredToPublish: ReviewWorkflowsWorkflowStageFiltersInput
  contentTypes: JSONFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [ReviewWorkflowsWorkflowFiltersInput]
  or: [ReviewWorkflowsWorkflowFiltersInput]
  not: ReviewWorkflowsWorkflowFiltersInput
}
input ReviewWorkflowsWorkflowInput {
  name: String
  stages: [ID]
  stageRequiredToPublish: ID
  contentTypes: JSON
  publishedAt: DateTime
}
input ReviewWorkflowsWorkflowStageFiltersInput {
  documentId: IDFilterInput
  name: StringFilterInput
  color: StringFilterInput
  workflow: ReviewWorkflowsWorkflowFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [ReviewWorkflowsWorkflowStageFiltersInput]
  or: [ReviewWorkflowsWorkflowStageFiltersInput]
  not: ReviewWorkflowsWorkflowStageFiltersInput
}
input ReviewWorkflowsWorkflowStageInput {
  name: String
  color: String
  workflow: ID
  publishedAt: DateTime
}
input UsersPermissionsPermissionFiltersInput {
  documentId: IDFilterInput
  action: StringFilterInput
  role: UsersPermissionsRoleFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [UsersPermissionsPermissionFiltersInput]
  or: [UsersPermissionsPermissionFiltersInput]
  not: UsersPermissionsPermissionFiltersInput
}
input UsersPermissionsRoleFiltersInput {
  documentId: IDFilterInput
  name: StringFilterInput
  description: StringFilterInput
  type: StringFilterInput
  permissions: UsersPermissionsPermissionFiltersInput
  users: UsersPermissionsUserFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [UsersPermissionsRoleFiltersInput]
  or: [UsersPermissionsRoleFiltersInput]
  not: UsersPermissionsRoleFiltersInput
}
input UsersPermissionsRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  publishedAt: DateTime
}
input UsersPermissionsUserFiltersInput {
  documentId: IDFilterInput
  username: StringFilterInput
  email: StringFilterInput
  provider: StringFilterInput
  confirmed: BooleanFilterInput
  blocked: BooleanFilterInput
  role: UsersPermissionsRoleFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [UsersPermissionsUserFiltersInput]
  or: [UsersPermissionsUserFiltersInput]
  not: UsersPermissionsUserFiltersInput
}
input UsersPermissionsUserInput {
  username: String
  email: String
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  publishedAt: DateTime
  password: String
}
input BlogPageInput {
  title: String
  slug: String
  posts: ComponentLayoutPostsSelectionInput
  publishedAt: DateTime
}
input CategoryFiltersInput {
  documentId: IDFilterInput
  title: StringFilterInput
  slug: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  locale: StringFilterInput
  localizations: CategoryFiltersInput
  and: [CategoryFiltersInput]
  or: [CategoryFiltersInput]
  not: CategoryFiltersInput
}
input CategoryInput {
  title: String
  slug: String
  publishedAt: DateTime
}
input HomePageInput {
  title: String
  hero: ComponentLayoutHeroInput
  blogPosts: ComponentLayoutPostsSelectionInput
  poetryPosts: ComponentLayoutPostsSelectionInput
  publishedAt: DateTime
}
input PoetryPageInput {
  title: String
  slug: String
  posts: ComponentLayoutPostsSelectionInput
  publishedAt: DateTime
}
input PostFiltersInput {
  documentId: IDFilterInput
  title: StringFilterInput
  slug: StringFilterInput
  category: CategoryFiltersInput
  PostImage: ComponentContentImageFiltersInput
  excerpt: StringFilterInput
  date: DateTimeFilterInput
  featured: BooleanFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  locale: StringFilterInput
  localizations: PostFiltersInput
  and: [PostFiltersInput]
  or: [PostFiltersInput]
  not: PostFiltersInput
}
input PostInput {
  title: String
  slug: String
  category: ID
  Content: [PostContentDynamicZoneInput!]
  PostImage: ComponentContentImageInput
  excerpt: String
  date: DateTime
  featured: Boolean
  coverImage: ID
  publishedAt: DateTime
}
input PostsPageFiltersInput {
  documentId: IDFilterInput
  title: StringFilterInput
  slug: StringFilterInput
  posts: ComponentLayoutPostsSelectionFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  locale: StringFilterInput
  localizations: PostsPageFiltersInput
  and: [PostsPageFiltersInput]
  or: [PostsPageFiltersInput]
  not: PostsPageFiltersInput
}
input PostsPageInput {
  title: String
  slug: String
  posts: ComponentLayoutPostsSelectionInput
  publishedAt: DateTime
}
input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}
input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}
input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String! = "local"
}
input PaginationArg {
  page: Int
  pageSize: Int
  start: Int
  limit: Int
}
"Exposes a URL that specifies the behavior of this scalar."
directive @specifiedBy(
    "The URL that specifies the behavior of this scalar."
    url: String!
  ) on SCALAR
"Indicates exactly one field must be supplied and this field must not be `null`."
directive @oneOf on INPUT_OBJECT

