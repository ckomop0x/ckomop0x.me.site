# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
}

union Morph = Category | CategoryAggregator | CategoryConnection | CategoryConnectionCreatedAt | CategoryConnectionId | CategoryConnectionName | CategoryConnectionSlug | CategoryConnectionUpdatedAt | CategoryConnection_id | CategoryGroupBy | ComponentPostRichText | I18NLocale | Post | PostAggregator | PostConnection | PostConnectionCategory | PostConnectionCreatedAt | PostConnectionDate | PostConnectionDescription | PostConnectionExcerpt | PostConnectionFeatured | PostConnectionId | PostConnectionImage | PostConnectionImage_url | PostConnectionLocale | PostConnectionPublished | PostConnectionPublished_at | PostConnectionSlug | PostConnectionTitle | PostConnectionUpdatedAt | PostConnection_id | PostGroupBy | UploadFile | UploadFileAggregator | UploadFileAggregatorAvg | UploadFileAggregatorMax | UploadFileAggregatorMin | UploadFileAggregatorSum | UploadFileConnection | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionCreatedAt | UploadFileConnectionExt | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionHeight | UploadFileConnectionId | UploadFileConnectionMime | UploadFileConnectionName | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | UploadFileConnectionSize | UploadFileConnectionUpdatedAt | UploadFileConnectionUrl | UploadFileConnectionWidth | UploadFileConnection_id | UploadFileGroupBy | UserPermissionsPasswordPayload | UsersPermissionsLoginPayload | UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleAggregator | UsersPermissionsRoleConnection | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionType | UsersPermissionsRoleConnection_id | UsersPermissionsRoleGroupBy | UsersPermissionsUser | UsersPermissionsUserAggregator | UsersPermissionsUserConnection | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionCreatedAt | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionRole | UsersPermissionsUserConnectionUpdatedAt | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnection_id | UsersPermissionsUserGroupBy | createCategoryPayload | createPostPayload | createRolePayload | createUserPayload | deleteCategoryPayload | deleteFilePayload | deletePostPayload | deleteRolePayload | deleteUserPayload | updateCategoryPayload | updatePostPayload | updateRolePayload | updateUserPayload

union PostContentDynamicZone = ComponentPostRichText

type AdminUser {
  firstname: String!
  id: ID!
  lastname: String!
  username: String
}

type Category {
  _id: ID!
  createdAt: DateTime!
  id: ID!
  name: String
  slug: String!
  updatedAt: DateTime!
}

type CategoryAggregator {
  count: Int
  totalCount: Int
}

type CategoryConnection {
  aggregate: CategoryAggregator
  groupBy: CategoryGroupBy
  values: [Category]
}

type CategoryConnectionCreatedAt {
  connection: CategoryConnection
  key: DateTime
}

type CategoryConnectionId {
  connection: CategoryConnection
  key: ID
}

type CategoryConnectionName {
  connection: CategoryConnection
  key: String
}

type CategoryConnectionSlug {
  connection: CategoryConnection
  key: String
}

type CategoryConnectionUpdatedAt {
  connection: CategoryConnection
  key: DateTime
}

type CategoryConnection_id {
  connection: CategoryConnection
  key: ID
}

type CategoryGroupBy {
  _id: [CategoryConnection_id]
  createdAt: [CategoryConnectionCreatedAt]
  id: [CategoryConnectionId]
  name: [CategoryConnectionName]
  slug: [CategoryConnectionSlug]
  updatedAt: [CategoryConnectionUpdatedAt]
}

type ComponentPostRichText {
  _id: ID!
  id: ID!
  rich_text: String
}

type I18NLocale {
  _id: ID!
  code: String
  createdAt: DateTime!
  id: ID!
  name: String
  updatedAt: DateTime!
}

type Mutation {
  createCategory(input: createCategoryInput): createCategoryPayload
  createPost(input: createPostInput): createPostPayload
  createPostLocalization(input: updatePostInput!): Post!
  "Create a new role"
  createRole(input: createRoleInput): createRolePayload
  "Create a new user"
  createUser(input: createUserInput): createUserPayload
  deleteCategory(input: deleteCategoryInput): deleteCategoryPayload
  "Delete one file"
  deleteFile(input: deleteFileInput): deleteFilePayload
  deletePost(input: deletePostInput): deletePostPayload
  "Delete an existing role"
  deleteRole(input: deleteRoleInput): deleteRolePayload
  "Delete an existing user"
  deleteUser(input: deleteUserInput): deleteUserPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  multipleUpload(field: String, files: [Upload]!, ref: String, refId: ID, source: String): [UploadFile]!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  updateCategory(input: updateCategoryInput): updateCategoryPayload
  updateFileInfo(id: ID!, info: FileInfoInput!): UploadFile!
  updatePost(input: updatePostInput): updatePostPayload
  "Update an existing role"
  updateRole(input: updateRoleInput): updateRolePayload
  "Update an existing user"
  updateUser(input: updateUserInput): updateUserPayload
  upload(field: String, file: Upload!, info: FileInfoInput, ref: String, refId: ID, source: String): UploadFile!
}

type Post {
  _id: ID!
  category: ENUM_POST_CATEGORY!
  content: [PostContentDynamicZone]
  createdAt: DateTime!
  date: DateTime
  description: String
  excerpt: String!
  featured: Boolean
  id: ID!
  image: UploadFile
  image_url: String
  locale: String
  localizations(limit: Int, sort: String, start: Int, where: JSON): [Post]
  published: Boolean
  published_at: DateTime
  slug: String!
  title: String
  updatedAt: DateTime!
}

type PostAggregator {
  count: Int
  totalCount: Int
}

type PostConnection {
  aggregate: PostAggregator
  groupBy: PostGroupBy
  values: [Post]
}

type PostConnectionCategory {
  connection: PostConnection
  key: String
}

type PostConnectionCreatedAt {
  connection: PostConnection
  key: DateTime
}

type PostConnectionDate {
  connection: PostConnection
  key: DateTime
}

type PostConnectionDescription {
  connection: PostConnection
  key: String
}

type PostConnectionExcerpt {
  connection: PostConnection
  key: String
}

type PostConnectionFeatured {
  connection: PostConnection
  key: Boolean
}

type PostConnectionId {
  connection: PostConnection
  key: ID
}

type PostConnectionImage {
  connection: PostConnection
  key: ID
}

type PostConnectionImage_url {
  connection: PostConnection
  key: String
}

type PostConnectionLocale {
  connection: PostConnection
  key: String
}

type PostConnectionPublished {
  connection: PostConnection
  key: Boolean
}

type PostConnectionPublished_at {
  connection: PostConnection
  key: DateTime
}

type PostConnectionSlug {
  connection: PostConnection
  key: String
}

type PostConnectionTitle {
  connection: PostConnection
  key: String
}

type PostConnectionUpdatedAt {
  connection: PostConnection
  key: DateTime
}

type PostConnection_id {
  connection: PostConnection
  key: ID
}

type PostGroupBy {
  _id: [PostConnection_id]
  category: [PostConnectionCategory]
  createdAt: [PostConnectionCreatedAt]
  date: [PostConnectionDate]
  description: [PostConnectionDescription]
  excerpt: [PostConnectionExcerpt]
  featured: [PostConnectionFeatured]
  id: [PostConnectionId]
  image: [PostConnectionImage]
  image_url: [PostConnectionImage_url]
  locale: [PostConnectionLocale]
  published: [PostConnectionPublished]
  published_at: [PostConnectionPublished_at]
  slug: [PostConnectionSlug]
  title: [PostConnectionTitle]
  updatedAt: [PostConnectionUpdatedAt]
}

type Query {
  categories(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [Category]
  categoriesConnection(limit: Int, sort: String, start: Int, where: JSON): CategoryConnection
  category(id: ID!, publicationState: PublicationState): Category
  files(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [UploadFile]
  filesConnection(limit: Int, sort: String, start: Int, where: JSON): UploadFileConnection
  me: UsersPermissionsMe
  post(id: ID!, publicationState: PublicationState): Post
  posts(limit: Int, locale: String, publicationState: PublicationState, sort: String, start: Int, where: JSON): [Post]
  postsConnection(limit: Int, locale: String, sort: String, start: Int, where: JSON): PostConnection
  role(id: ID!, publicationState: PublicationState): UsersPermissionsRole
  "Retrieve all the existing roles. You can't apply filters on this query."
  roles(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(limit: Int, sort: String, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!, publicationState: PublicationState): UsersPermissionsUser
  users(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(limit: Int, sort: String, start: Int, where: JSON): UsersPermissionsUserConnection
}

type UploadFile {
  _id: ID!
  alternativeText: String
  caption: String
  createdAt: DateTime!
  ext: String
  formats: JSON
  hash: String!
  height: Int
  id: ID!
  mime: String!
  name: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related(limit: Int, sort: String, start: Int, where: JSON): [Morph]
  size: Float!
  updatedAt: DateTime!
  url: String!
  width: Int
}

type UploadFileAggregator {
  avg: UploadFileAggregatorAvg
  count: Int
  max: UploadFileAggregatorMax
  min: UploadFileAggregatorMin
  sum: UploadFileAggregatorSum
  totalCount: Int
}

type UploadFileAggregatorAvg {
  height: Float
  size: Float
  width: Float
}

type UploadFileAggregatorMax {
  height: Float
  size: Float
  width: Float
}

type UploadFileAggregatorMin {
  height: Float
  size: Float
  width: Float
}

type UploadFileAggregatorSum {
  height: Float
  size: Float
  width: Float
}

type UploadFileConnection {
  aggregate: UploadFileAggregator
  groupBy: UploadFileGroupBy
  values: [UploadFile]
}

type UploadFileConnectionAlternativeText {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionCaption {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionCreatedAt {
  connection: UploadFileConnection
  key: DateTime
}

type UploadFileConnectionExt {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionFormats {
  connection: UploadFileConnection
  key: JSON
}

type UploadFileConnectionHash {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionHeight {
  connection: UploadFileConnection
  key: Int
}

type UploadFileConnectionId {
  connection: UploadFileConnection
  key: ID
}

type UploadFileConnectionMime {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionName {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionPreviewUrl {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionProvider {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionProvider_metadata {
  connection: UploadFileConnection
  key: JSON
}

type UploadFileConnectionSize {
  connection: UploadFileConnection
  key: Float
}

type UploadFileConnectionUpdatedAt {
  connection: UploadFileConnection
  key: DateTime
}

type UploadFileConnectionUrl {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionWidth {
  connection: UploadFileConnection
  key: Int
}

type UploadFileConnection_id {
  connection: UploadFileConnection
  key: ID
}

type UploadFileGroupBy {
  _id: [UploadFileConnection_id]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  createdAt: [UploadFileConnectionCreatedAt]
  ext: [UploadFileConnectionExt]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  height: [UploadFileConnectionHeight]
  id: [UploadFileConnectionId]
  mime: [UploadFileConnectionMime]
  name: [UploadFileConnectionName]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
  size: [UploadFileConnectionSize]
  updatedAt: [UploadFileConnectionUpdatedAt]
  url: [UploadFileConnectionUrl]
  width: [UploadFileConnectionWidth]
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  blocked: Boolean
  confirmed: Boolean
  email: String!
  id: ID!
  role: UsersPermissionsMeRole
  username: String!
}

type UsersPermissionsMeRole {
  description: String
  id: ID!
  name: String!
  type: String
}

type UsersPermissionsPermission {
  _id: ID!
  action: String!
  controller: String!
  enabled: Boolean!
  id: ID!
  policy: String
  role: UsersPermissionsRole
  type: String!
}

type UsersPermissionsRole {
  _id: ID!
  description: String
  id: ID!
  name: String!
  permissions(limit: Int, sort: String, start: Int, where: JSON): [UsersPermissionsPermission]
  type: String
  users(limit: Int, sort: String, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleConnection {
  aggregate: UsersPermissionsRoleAggregator
  groupBy: UsersPermissionsRoleGroupBy
  values: [UsersPermissionsRole]
}

type UsersPermissionsRoleConnectionDescription {
  connection: UsersPermissionsRoleConnection
  key: String
}

type UsersPermissionsRoleConnectionId {
  connection: UsersPermissionsRoleConnection
  key: ID
}

type UsersPermissionsRoleConnectionName {
  connection: UsersPermissionsRoleConnection
  key: String
}

type UsersPermissionsRoleConnectionType {
  connection: UsersPermissionsRoleConnection
  key: String
}

type UsersPermissionsRoleConnection_id {
  connection: UsersPermissionsRoleConnection
  key: ID
}

type UsersPermissionsRoleGroupBy {
  _id: [UsersPermissionsRoleConnection_id]
  description: [UsersPermissionsRoleConnectionDescription]
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  _id: ID!
  blocked: Boolean
  confirmed: Boolean
  createdAt: DateTime!
  email: String!
  id: ID!
  provider: String
  role: UsersPermissionsRole
  updatedAt: DateTime!
  username: String!
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserConnection {
  aggregate: UsersPermissionsUserAggregator
  groupBy: UsersPermissionsUserGroupBy
  values: [UsersPermissionsUser]
}

type UsersPermissionsUserConnectionBlocked {
  connection: UsersPermissionsUserConnection
  key: Boolean
}

type UsersPermissionsUserConnectionConfirmed {
  connection: UsersPermissionsUserConnection
  key: Boolean
}

type UsersPermissionsUserConnectionCreatedAt {
  connection: UsersPermissionsUserConnection
  key: DateTime
}

type UsersPermissionsUserConnectionEmail {
  connection: UsersPermissionsUserConnection
  key: String
}

type UsersPermissionsUserConnectionId {
  connection: UsersPermissionsUserConnection
  key: ID
}

type UsersPermissionsUserConnectionProvider {
  connection: UsersPermissionsUserConnection
  key: String
}

type UsersPermissionsUserConnectionRole {
  connection: UsersPermissionsUserConnection
  key: ID
}

type UsersPermissionsUserConnectionUpdatedAt {
  connection: UsersPermissionsUserConnection
  key: DateTime
}

type UsersPermissionsUserConnectionUsername {
  connection: UsersPermissionsUserConnection
  key: String
}

type UsersPermissionsUserConnection_id {
  connection: UsersPermissionsUserConnection
  key: ID
}

type UsersPermissionsUserGroupBy {
  _id: [UsersPermissionsUserConnection_id]
  blocked: [UsersPermissionsUserConnectionBlocked]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  createdAt: [UsersPermissionsUserConnectionCreatedAt]
  email: [UsersPermissionsUserConnectionEmail]
  id: [UsersPermissionsUserConnectionId]
  provider: [UsersPermissionsUserConnectionProvider]
  role: [UsersPermissionsUserConnectionRole]
  updatedAt: [UsersPermissionsUserConnectionUpdatedAt]
  username: [UsersPermissionsUserConnectionUsername]
}

type createCategoryPayload {
  category: Category
}

type createPostPayload {
  post: Post
}

type createRolePayload {
  role: UsersPermissionsRole
}

type createUserPayload {
  user: UsersPermissionsUser
}

type deleteCategoryPayload {
  category: Category
}

type deleteFilePayload {
  file: UploadFile
}

type deletePostPayload {
  post: Post
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

type updateCategoryPayload {
  category: Category
}

type updatePostPayload {
  post: Post
}

type updateRolePayload {
  role: UsersPermissionsRole
}

type updateUserPayload {
  user: UsersPermissionsUser
}

enum ENUM_POST_CATEGORY {
  blog
  poetry
  unsorted
}

enum PublicationState {
  LIVE
  PREVIEW
}

input CategoryInput {
  created_by: ID
  name: String
  slug: String!
  updated_by: ID
}

input ComponentPostRichTextInput {
  rich_text: String
}

input FileInfoInput {
  alternativeText: String
  caption: String
  name: String
}

input FileInput {
  alternativeText: String
  caption: String
  created_by: ID
  ext: String
  formats: JSON
  hash: String!
  height: Int
  mime: String!
  name: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
  size: Float!
  updated_by: ID
  url: String!
  width: Int
}

input InputID {
  id: ID!
}

input LocaleInput {
  code: String
  created_by: ID
  name: String
  updated_by: ID
}

input PostInput {
  category: ENUM_POST_CATEGORY
  content: [PostContentDynamicZoneInput!]
  created_by: ID
  date: DateTime
  description: String
  excerpt: String!
  featured: Boolean
  image: ID
  image_url: String
  locale: String
  localizations: [ID]
  published: Boolean
  published_at: DateTime
  slug: String!
  title: String
  updated_by: ID
}

input RoleInput {
  created_by: ID
  description: String
  name: String!
  permissions: [ID]
  type: String
  updated_by: ID
  users: [ID]
}

input UserInput {
  blocked: Boolean
  confirmationToken: String
  confirmed: Boolean
  created_by: ID
  email: String!
  password: String
  provider: String
  resetPasswordToken: String
  role: ID
  updated_by: ID
  username: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

input UsersPermissionsRegisterInput {
  email: String!
  password: String!
  username: String!
}

input createCategoryInput {
  data: CategoryInput
}

input createPostInput {
  data: PostInput
}

input createRoleInput {
  data: RoleInput
}

input createUserInput {
  data: UserInput
}

input deleteCategoryInput {
  where: InputID
}

input deleteFileInput {
  where: InputID
}

input deletePostInput {
  where: InputID
}

input deleteRoleInput {
  where: InputID
}

input deleteUserInput {
  where: InputID
}

input editCategoryInput {
  created_by: ID
  name: String
  slug: String
  updated_by: ID
}

input editComponentPostRichTextInput {
  id: ID
  rich_text: String
}

input editFileInput {
  alternativeText: String
  caption: String
  created_by: ID
  ext: String
  formats: JSON
  hash: String
  height: Int
  mime: String
  name: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
  size: Float
  updated_by: ID
  url: String
  width: Int
}

input editLocaleInput {
  code: String
  created_by: ID
  name: String
  updated_by: ID
}

input editPostInput {
  category: ENUM_POST_CATEGORY
  content: [PostContentDynamicZoneInput!]
  created_by: ID
  date: DateTime
  description: String
  excerpt: String
  featured: Boolean
  image: ID
  image_url: String
  locale: String
  localizations: [ID]
  published: Boolean
  published_at: DateTime
  slug: String
  title: String
  updated_by: ID
}

input editRoleInput {
  created_by: ID
  description: String
  name: String
  permissions: [ID]
  type: String
  updated_by: ID
  users: [ID]
}

input editUserInput {
  blocked: Boolean
  confirmationToken: String
  confirmed: Boolean
  created_by: ID
  email: String
  password: String
  provider: String
  resetPasswordToken: String
  role: ID
  updated_by: ID
  username: String
}

input updateCategoryInput {
  data: editCategoryInput
  where: InputID
}

input updatePostInput {
  data: editPostInput
  where: InputID
}

input updateRoleInput {
  data: editRoleInput
  where: InputID
}

input updateUserInput {
  data: editUserInput
  where: InputID
}


"Input type for dynamic zone content of Post"
scalar PostContentDynamicZoneInput

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

"A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar DateTime

"A time string with format: HH:mm:ss.SSS"
scalar Time

"A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar Date

"The `Long` scalar type represents 52-bit integers"
scalar Long

"The `Upload` scalar type represents a file upload."
scalar Upload
