schema {
  query: Query
  mutation: Mutation
}
"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy on SCALAR
input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}
type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}
type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}
input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}
input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}
type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}
type UserPermissionsPasswordPayload {
  ok: Boolean!
}
type Category {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  slug: String!
}
type CategoryConnection {
  values: [Category]
  groupBy: CategoryGroupBy
  aggregate: CategoryAggregator
}
type CategoryAggregator {
  count: Int
  totalCount: Int
}
type CategoryGroupBy {
  id: [CategoryConnectionId]
  _id: [CategoryConnection_id]
  createdAt: [CategoryConnectionCreatedAt]
  updatedAt: [CategoryConnectionUpdatedAt]
  name: [CategoryConnectionName]
  slug: [CategoryConnectionSlug]
}
type CategoryConnectionId {
  key: ID
  connection: CategoryConnection
}
type CategoryConnection_id {
  key: ID
  connection: CategoryConnection
}
type CategoryConnectionCreatedAt {
  key: DateTime
  connection: CategoryConnection
}
type CategoryConnectionUpdatedAt {
  key: DateTime
  connection: CategoryConnection
}
type CategoryConnectionName {
  key: String
  connection: CategoryConnection
}
type CategoryConnectionSlug {
  key: String
  connection: CategoryConnection
}
input CategoryInput {
  name: String
  slug: String!
  created_by: ID
  updated_by: ID
}
input editCategoryInput {
  name: String
  slug: String
  created_by: ID
  updated_by: ID
}
input createCategoryInput {
  data: CategoryInput
}
type createCategoryPayload {
  category: Category
}
input updateCategoryInput {
  where: InputID
  data: editCategoryInput
}
type updateCategoryPayload {
  category: Category
}
input deleteCategoryInput {
  where: InputID
}
type deleteCategoryPayload {
  category: Category
}
enum ENUM_POST_CATEGORY {
  poetry
  blog
  unsorted
}
union PostContentDynamicZone = ComponentPostRichText
"""Input type for dynamic zone content of Post"""
scalar PostContentDynamicZoneInput
type Post {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String
  date: DateTime
  excerpt: String!
  image: UploadFile
  description: String
  published: Boolean
  image_url: String
  category: ENUM_POST_CATEGORY!
  slug: String!
  featured: Boolean
  content: [PostContentDynamicZone]
  locale: String
  published_at: DateTime
  localizations(sort: String, limit: Int, start: Int, where: JSON): [Post]
}
type PostConnection {
  values: [Post]
  groupBy: PostGroupBy
  aggregate: PostAggregator
}
type PostAggregator {
  count: Int
  totalCount: Int
}
type PostGroupBy {
  id: [PostConnectionId]
  _id: [PostConnection_id]
  createdAt: [PostConnectionCreatedAt]
  updatedAt: [PostConnectionUpdatedAt]
  title: [PostConnectionTitle]
  date: [PostConnectionDate]
  excerpt: [PostConnectionExcerpt]
  image: [PostConnectionImage]
  description: [PostConnectionDescription]
  published: [PostConnectionPublished]
  image_url: [PostConnectionImage_url]
  category: [PostConnectionCategory]
  slug: [PostConnectionSlug]
  featured: [PostConnectionFeatured]
  locale: [PostConnectionLocale]
  published_at: [PostConnectionPublished_at]
}
type PostConnectionId {
  key: ID
  connection: PostConnection
}
type PostConnection_id {
  key: ID
  connection: PostConnection
}
type PostConnectionCreatedAt {
  key: DateTime
  connection: PostConnection
}
type PostConnectionUpdatedAt {
  key: DateTime
  connection: PostConnection
}
type PostConnectionTitle {
  key: String
  connection: PostConnection
}
type PostConnectionDate {
  key: DateTime
  connection: PostConnection
}
type PostConnectionExcerpt {
  key: String
  connection: PostConnection
}
type PostConnectionImage {
  key: ID
  connection: PostConnection
}
type PostConnectionDescription {
  key: String
  connection: PostConnection
}
type PostConnectionPublished {
  key: Boolean
  connection: PostConnection
}
type PostConnectionImage_url {
  key: String
  connection: PostConnection
}
type PostConnectionCategory {
  key: String
  connection: PostConnection
}
type PostConnectionSlug {
  key: String
  connection: PostConnection
}
type PostConnectionFeatured {
  key: Boolean
  connection: PostConnection
}
type PostConnectionLocale {
  key: String
  connection: PostConnection
}
type PostConnectionPublished_at {
  key: DateTime
  connection: PostConnection
}
input PostInput {
  title: String
  date: DateTime
  excerpt: String!
  image: ID
  description: String
  published: Boolean
  image_url: String
  category: ENUM_POST_CATEGORY
  slug: String!
  featured: Boolean
  content: [PostContentDynamicZoneInput!]
  localizations: [ID]
  locale: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}
input editPostInput {
  title: String
  date: DateTime
  excerpt: String
  image: ID
  description: String
  published: Boolean
  image_url: String
  category: ENUM_POST_CATEGORY
  slug: String
  featured: Boolean
  content: [PostContentDynamicZoneInput!]
  localizations: [ID]
  locale: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}
input createPostInput {
  data: PostInput
}
type createPostPayload {
  post: Post
}
input updatePostInput {
  where: InputID
  data: editPostInput
}
type updatePostPayload {
  post: Post
}
input deletePostInput {
  where: InputID
}
type deletePostPayload {
  post: Post
}
type I18NLocale {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  code: String
}
input LocaleInput {
  name: String
  code: String
  created_by: ID
  updated_by: ID
}
input editLocaleInput {
  name: String
  code: String
  created_by: ID
  updated_by: ID
}
type UploadFile {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}
"""The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point)."""
scalar Float
type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}
type UploadFileAggregator {
  count: Int
  totalCount: Int
  sum: UploadFileAggregatorSum
  avg: UploadFileAggregatorAvg
  min: UploadFileAggregatorMin
  max: UploadFileAggregatorMax
}
type UploadFileAggregatorSum {
  width: Float
  height: Float
  size: Float
}
type UploadFileAggregatorAvg {
  width: Float
  height: Float
  size: Float
}
type UploadFileAggregatorMin {
  width: Float
  height: Float
  size: Float
}
type UploadFileAggregatorMax {
  width: Float
  height: Float
  size: Float
}
type UploadFileGroupBy {
  id: [UploadFileConnectionId]
  _id: [UploadFileConnection_id]
  createdAt: [UploadFileConnectionCreatedAt]
  updatedAt: [UploadFileConnectionUpdatedAt]
  name: [UploadFileConnectionName]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  width: [UploadFileConnectionWidth]
  height: [UploadFileConnectionHeight]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
}
type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}
type UploadFileConnection_id {
  key: ID
  connection: UploadFileConnection
}
type UploadFileConnectionCreatedAt {
  key: DateTime
  connection: UploadFileConnection
}
type UploadFileConnectionUpdatedAt {
  key: DateTime
  connection: UploadFileConnection
}
type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}
type UploadFileConnectionAlternativeText {
  key: String
  connection: UploadFileConnection
}
type UploadFileConnectionCaption {
  key: String
  connection: UploadFileConnection
}
type UploadFileConnectionWidth {
  key: Int
  connection: UploadFileConnection
}
type UploadFileConnectionHeight {
  key: Int
  connection: UploadFileConnection
}
type UploadFileConnectionFormats {
  key: JSON
  connection: UploadFileConnection
}
type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}
type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}
type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}
type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}
type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}
type UploadFileConnectionPreviewUrl {
  key: String
  connection: UploadFileConnection
}
type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}
type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}
input FileInput {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}
input editFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}
input deleteFileInput {
  where: InputID
}
type deleteFilePayload {
  file: UploadFile
}
type UsersPermissionsPermission {
  id: ID!
  _id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}
type UsersPermissionsRole {
  id: ID!
  _id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}
type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}
type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}
type UsersPermissionsRoleGroupBy {
  id: [UsersPermissionsRoleConnectionId]
  _id: [UsersPermissionsRoleConnection_id]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}
type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}
type UsersPermissionsRoleConnection_id {
  key: ID
  connection: UsersPermissionsRoleConnection
}
type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}
type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}
type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}
input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}
input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}
input createRoleInput {
  data: RoleInput
}
type createRolePayload {
  role: UsersPermissionsRole
}
input updateRoleInput {
  where: InputID
  data: editRoleInput
}
type updateRolePayload {
  role: UsersPermissionsRole
}
input deleteRoleInput {
  where: InputID
}
type deleteRolePayload {
  role: UsersPermissionsRole
}
type UsersPermissionsUser {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}
type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}
type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}
type UsersPermissionsUserGroupBy {
  id: [UsersPermissionsUserConnectionId]
  _id: [UsersPermissionsUserConnection_id]
  createdAt: [UsersPermissionsUserConnectionCreatedAt]
  updatedAt: [UsersPermissionsUserConnectionUpdatedAt]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}
type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}
type UsersPermissionsUserConnection_id {
  key: ID
  connection: UsersPermissionsUserConnection
}
type UsersPermissionsUserConnectionCreatedAt {
  key: DateTime
  connection: UsersPermissionsUserConnection
}
type UsersPermissionsUserConnectionUpdatedAt {
  key: DateTime
  connection: UsersPermissionsUserConnection
}
type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}
type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}
type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}
type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}
type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}
type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}
input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}
input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}
input createUserInput {
  data: UserInput
}
type createUserPayload {
  user: UsersPermissionsUser
}
input updateUserInput {
  where: InputID
  data: editUserInput
}
type updateUserPayload {
  user: UsersPermissionsUser
}
input deleteUserInput {
  where: InputID
}
type deleteUserPayload {
  user: UsersPermissionsUser
}
type ComponentPostRichText {
  id: ID!
  _id: ID!
  rich_text: String
}
input ComponentPostRichTextInput {
  rich_text: String
}
input editComponentPostRichTextInput {
  id: ID
  rich_text: String
}
union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | UserPermissionsPasswordPayload | Category | CategoryConnection | CategoryAggregator | CategoryGroupBy | CategoryConnectionId | CategoryConnection_id | CategoryConnectionCreatedAt | CategoryConnectionUpdatedAt | CategoryConnectionName | CategoryConnectionSlug | createCategoryPayload | updateCategoryPayload | deleteCategoryPayload | Post | PostConnection | PostAggregator | PostGroupBy | PostConnectionId | PostConnection_id | PostConnectionCreatedAt | PostConnectionUpdatedAt | PostConnectionTitle | PostConnectionDate | PostConnectionExcerpt | PostConnectionImage | PostConnectionDescription | PostConnectionPublished | PostConnectionImage_url | PostConnectionCategory | PostConnectionSlug | PostConnectionFeatured | PostConnectionLocale | PostConnectionPublished_at | createPostPayload | updatePostPayload | deletePostPayload | I18NLocale | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileAggregatorSum | UploadFileAggregatorAvg | UploadFileAggregatorMin | UploadFileAggregatorMax | UploadFileGroupBy | UploadFileConnectionId | UploadFileConnection_id | UploadFileConnectionCreatedAt | UploadFileConnectionUpdatedAt | UploadFileConnectionName | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionWidth | UploadFileConnectionHeight | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | deleteFilePayload | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnectionId | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionCreatedAt | UsersPermissionsUserConnectionUpdatedAt | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | createUserPayload | updateUserPayload | deleteUserPayload | ComponentPostRichText
input InputID {
  id: ID!
}
enum PublicationState {
  LIVE
  PREVIEW
}
type AdminUser {
  id: ID!
  username: String
  firstname: String!
  lastname: String!
}
type Query {
  category(id: ID!, publicationState: PublicationState): Category
  categories(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Category]
  categoriesConnection(sort: String, limit: Int, start: Int, where: JSON): CategoryConnection
  post(id: ID!, publicationState: PublicationState): Post
  posts(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState, locale: String): [Post]
  postsConnection(sort: String, limit: Int, start: Int, where: JSON, locale: String): PostConnection
  files(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!, publicationState: PublicationState): UsersPermissionsRole
  """Retrieve all the existing roles. You can't apply filters on this query."""
  roles(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!, publicationState: PublicationState): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}
type Mutation {
  createCategory(input: createCategoryInput): createCategoryPayload
  updateCategory(input: updateCategoryInput): updateCategoryPayload
  deleteCategory(input: deleteCategoryInput): deleteCategoryPayload
  createPost(input: createPostInput): createPostPayload
  updatePost(input: updatePostInput): updatePostPayload
  deletePost(input: deletePostInput): deletePostPayload
  """Delete one file"""
  deleteFile(input: deleteFileInput): deleteFilePayload
  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload
  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload
  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload
  """Create a new user"""
  createUser(input: createUserInput): createUserPayload
  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload
  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  createPostLocalization(input: updatePostInput!): Post!
  upload(refId: ID, ref: String, field: String, source: String, info: FileInfoInput, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  updateFileInfo(id: ID!, info: FileInfoInput!): UploadFile!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}
"""The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."""
scalar JSON
"""A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."""
scalar DateTime
"""A time string with format: HH:mm:ss.SSS"""
scalar Time
"""A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."""
scalar Date
"""The `Long` scalar type represents 52-bit integers"""
scalar Long
"""The `Upload` scalar type represents a file upload."""
scalar Upload
